// SPDX-FileCopyrightText: Copyright 2025 Carabiner Systems, Inc
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
package carabiner.policy.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "in_toto_attestation/v1/resource_descriptor.proto";

option go_package = "github.com/carabiner-dev/policy/api/v1";

message PolicySet {
    // ID is the policySet identifier
    string id = 1;

    // Meta holds the PolicySet metadata informartion
    PolicySetMeta meta = 2;

    // Common groups the common data elements to be share by all the
    // policies in the set.
    PolicySetCommon common = 3;

    // Policies is the list of policies grouped in the PolicySet
    repeated Policy policies = 4;

    // Chain is the evidence chain to compute a set of subjects to which
    // al the policies will apply.
    repeated ChainLink chain = 5;
}

message PolicySetMeta {
    string runtime = 1;
    string description = 2;
    google.protobuf.Timestamp expiration = 3;
    int64 version = 4;
    string enforce = 5;
    repeated FrameworkRef frameworks = 6;
}

// FrameworkRef is a reference to a security framework. The reference binds
// the controls tested by each the policy to the the framework definition.  
message FrameworkRef {
    string id = 1; // String identifier for the framework
    string name = 2; // Security framework name
    in_toto_attestation.v1.ResourceDescriptor definition = 3; // Link to the framework definition
}

message PolicySetCommon {
    repeated Identity identities = 1;
    repeated PolicyRef references = 2;
    map<string, ContextVal> context = 3;
}

message Policy {
    string id = 1;
    PolicyRef source = 2;
    Meta meta = 3;
    map<string, ContextVal> context = 4;
    repeated ChainLink chain = 5;
    repeated Identity identities = 6;
    PredicateSpec predicates = 7;
    repeated Transformer transformers = 8;
    repeated Tenet tenets = 9;
}

message PolicyRef {
    string id = 1;
    int64 version = 2;
    Identity identity = 3;
    in_toto_attestation.v1.ResourceDescriptor location = 4;
}

message ChainLink {
    oneof source {
        ChainedPredicate predicate = 1;
        // ChainedOutput output = 2;
    };
}

// Meta contains information about the policy itself
message Meta {
    string runtime = 1;
    string description = 2;
    string assert_mode = 3;
    repeated Control controls = 4; 
    int64 version = 5;
    string enforce = 6;
    optional google.protobuf.Timestamp expiration = 7;
}

// Identity captures a signer identity. An identity can one of:
//   a) A sigstore identity
//   b) A key
//   c) A reference to an identity defined outside the policy
message Identity {
    string id = 1;
    optional IdentitySigstore sigstore = 2;
    optional IdentityKey key = 3;
    optional IdentityRef ref = 4;
}

// Control is a mapping tying the policy to an framework control
message Control {
    string id = 1;
    string class = 2;
    string framework = 3;
    string title = 4;
}

// IdentitySigstore represents the identity data in a Fulcio cert.
message IdentitySigstore {
    optional string mode = 1; // exact | regexp
    string issuer = 2;        // https://accounts.google.com
    string identity = 3;      //  "identity": "puerco@gmail.com"
}

// IdentityKey registers the data of a key used to sign attestations.
message IdentityKey {
    string id = 1;   // Key ID
    string type = 2; // Identity type
    string data = 3; // Public key data
}

// IdentityRef represents an identity defined outside of the policy. Most commonly
// these identities will be defined at the policy set level to have a common
// definition that can be reused by all policies in a set. 
message IdentityRef {
    string id = 1;
}

// ContextVal defines a contextual value needed by a policy. Context values
// are defined from external sources at runtime and if required will cause the
// policy to fail if unset. 
message ContextVal {
    string type = 1;
    optional bool required = 2;
    optional google.protobuf.Value value = 3;
    optional google.protobuf.Value default = 4;
}

// The error structure is returned when a policy is evaluated successfully but 
// the evaluation fails.
message Error {
    // Message contains the condition that failed to be met, causing the policy to fail.
    string message = 1;
    // Guidance is an optional text record that is surfaced to the user with 
    // suggestions to make the policy evaluation pass.
    string guidance = 2;
}

// Este hay que arreglarlo
message Transformer {
    string id = 1;
}

message PredicateSpec {
    repeated string types = 1;
    int32 limit = 2;
}

// Tenet
message Tenet {
    string id = 1;
    string runtime = 2;
    string code = 3;
    PredicateSpec predicates = 4;
    map <string, Output> outputs = 5;
    Error error = 6;
    string title = 7;
    Assessment assessment = 8;
}

message ChainedOutput {
    string policy = 1;
    string tenet = 2; 
}

// ChainedPredicate links a subject to another by extracting data from
// attestations of the first. The spec requires a `selector` to be executed
// by the specified `runtime` on an attestation of type `type`.
//
// The selector exec is expected to return either a hash string or a struct that
// looks like an in-toto resource descriptor which becomes the new effective
// subject during the evaluation.
message ChainedPredicate {
    string type = 1;
    string selector = 2;
    string runtime = 3;
    repeated Identity identities = 5;
}

message Assessment {
    string message = 1; 
}

message Output {
    string code = 1;
    google.protobuf.Value value = 2;
}
